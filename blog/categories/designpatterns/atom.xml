<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Designpatterns | Jason's drunk words]]></title>
  <link href="http://toby1024.github.io/blog/categories/designpatterns/atom.xml" rel="self"/>
  <link href="http://toby1024.github.io/"/>
  <updated>2020-11-27T09:43:44+08:00</updated>
  <id>http://toby1024.github.io/</id>
  <author>
    <name><![CDATA[jason3305@126.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[设计模式-创建型]]></title>
    <link href="http://toby1024.github.io/blog/2020/11/26/designpatterns2/"/>
    <updated>2020-11-26T14:47:26+08:00</updated>
    <id>http://toby1024.github.io/blog/2020/11/26/designpatterns2</id>
    <content type="html"><![CDATA[<p>{% img /images/DesignPatterns/20201126144901.jpg %}</p>

<!--more-->


<h2>单例模式</h2>

<p>单例模式，顾名思义就是一个类只有一个实例。
单例主要的好处就是，1:可以解决资源访问冲突的问题。2:减少资源浪费。</p>

<h3>单例的实现方式</h3>

<p>1:饿汉式</p>

<p>在类加载的时候就实力化对象，不支持延迟加载。
```java
public class HungryDemo {
    private AtomicInteger id = new AtomicInteger(0);
    public static HungryDemo instance = new HungryDemo();</p>

<pre><code>private HungryDemo() {
}

public static HungryDemo getInstance() {
    return instance;
}

public int getId() {
    return id.incrementAndGet();
}

public static void main(String[] args) {
    for (int i = 0; i &lt; 10; i++) {
        new Thread(() -&gt; {
            try {
                Thread.sleep(new Random().nextInt(10000));
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            HungryDemo instance = HungryDemo.getInstance();
            System.out.println(instance + "==&gt;" + instance.getId());
        }).start();
    }
}
</code></pre>

<p>}
```</p>

<p>2:懒汉式</p>

<p>支持延迟加载，在使用的时候才真正加载。
```java
public class LazyDemo {
    private AtomicInteger id = new AtomicInteger(0);</p>

<pre><code>public static LazyDemo instance;

private LazyDemo() {
}

public static synchronized LazyDemo getInstance() {
    if (Objects.isNull(instance)) {
        instance = new LazyDemo();
    }
    return instance;
}

public int getId() {
    return id.incrementAndGet();
}
public static void main(String[] args) {
    for (int i = 0; i &lt; 10; i++) {
        new Thread(() -&gt; {
            try {
                Thread.sleep(new Random().nextInt(10000));
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            LazyDemo instance = LazyDemo.getInstance();
            System.out.println(instance + "==&gt;" + instance.getId());
        }).start();
    }
}
</code></pre>

<p>}
```
饿汉和懒汉的区别就是一个支持延迟加载，一个不支持。懒汉模式还要加锁，防止并发问题。从这一点来看，懒汉模式性能是不如饿汉模式，饿汉模式在类加载时就进行实力化，也可以提前将实力化过程中发生的资源不足等问题提前暴露，而不是等到业务访问后才发现无法进行初始化，引发线上事故。
但这两种都有各自的不足，所以现在有第三种方式。</p>

<p>3:双重检测
```java
public class DoubleCheckDemo {
    private AtomicInteger id = new AtomicInteger(0);
    public static DoubleCheckDemo instance;</p>

<pre><code>private DoubleCheckDemo() {
}

public static DoubleCheckDemo getInstance() {
    if (Objects.isNull(instance)) {
        synchronized (DoubleCheckDemo.class) {
            System.out.println("加锁操作");
            if (Objects.isNull(instance)) {
                instance = new DoubleCheckDemo();
            }
        }
    }
    return instance;
}

public int getId() {
    return id.incrementAndGet();
}

public static void main(String[] args) {
    for (int i = 0; i &lt; 10; i++) {
        new Thread(() -&gt; {
            try {
                Thread.sleep(new Random().nextInt(10000));
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            DoubleCheckDemo instance = DoubleCheckDemo.getInstance();
            System.out.println(instance + "==&gt;" + instance.getId());
        }).start();
    }
}
</code></pre>

<p>}
```
双重检测解决了懒汉模式的并发性能问题，同时支持懒加载。</p>

<p>4:静态内部类</p>

<p>静态内部类的实现比双重检测要更加简单，同时也能做到懒加载。
```java
public class InnerClassDemo {</p>

<pre><code>private AtomicInteger id = new AtomicInteger(0);

private InnerClassDemo() {
}

private static class InnerClassDemoHolder {
    private static final InnerClassDemo instance = new InnerClassDemo();
}

public static InnerClassDemo getInstance() {
    return InnerClassDemoHolder.instance;
}

public int getId() {
    return id.incrementAndGet();
}

public static void main(String[] args) {
    for (int i = 0; i &lt; 10; i++) {
        new Thread(() -&gt; {
            try {
                Thread.sleep(new Random().nextInt(10000));
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            InnerClassDemo instance = InnerClassDemo.getInstance();
            System.out.println(instance + "==&gt;" + instance.getId());
        }).start();
    }
}
</code></pre>

<p>}
<code>``
</code>InnerClassDemoHolder<code>是静态内部类，一开始并不会加载，等到调用</code>getInstance()`方法时才会被加载，这是一种无锁的实现，线程安全由jvm来保证。</p>

<p>5:枚举</p>

<p>采用枚举的方式来实现是最简单的方式。
```java
public enum EnumDemo {
    INSTANCE;
    private AtomicInteger id = new AtomicInteger(0);</p>

<pre><code>public int getId() {
    return id.incrementAndGet();
}
</code></pre>

<p>}
public class EnumDemoTest {
    public static void main(String[] args) {
        for (int i = 0; i &lt; 10; i++) {
            new Thread(() -> {
                try {
                    Thread.sleep(new Random().nextInt(10000));
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                EnumDemo instance = EnumDemo.INSTANCE;
                System.out.println(instance + &ldquo;==>&rdquo; + instance.getId());
            }).start();
        }
    }
}
```</p>

<h3>单例模式的问题</h3>

<ul>
<li>单例对OOP特性的支持不友好，单例对继承，多态特性支持不友好，违背了面向抽象编程的思想。</li>
<li>单例对代码的扩展性不好。</li>
<li>单例对代码的测试性不好，单例往往硬编码进业务，后续mock不方便，需要在一开始就对单例进行包装。</li>
<li>单例不支持有参数的构造函数，单例的设计是无状态的，就无法进行参数传递来构建实例。</li>
</ul>


<h3>单例的范围</h3>

<p>如果需要在线程内实现单例，可以使用ThreadLocal并发工具类。</p>

<p>如果需要在集群环境下实现单例，可以借助外部共享存储，例如redis。当进行实例创建的时候，从外部存储加载对象，如果没有则创建后存储回去，这里需要分布式锁的接入，实现起来比较麻烦。</p>

<h2>工厂模式</h2>

<h3>简单工厂</h3>

<p>简单工厂可以看作是将对象的创建抽取出来独立的一种实现，这种实现方式比较简单，目的就是将创建对象的负责业务代码从业务中剥离出来，实现复用。
缺点是逻辑过于集中，不利于后续扩展。</p>

<h3>工厂方法</h3>

<p>工厂方法模式是简单工厂的进一步抽象。使用面向对象的多态性，保持了简单工厂的的优点。将不同的构建逻辑分开到不同的实现中，避免了修改单个逻辑影响所有的构建逻辑。</p>

<h3>抽象工厂</h3>

<p>抽象工厂提供一个抽象，而不是具体实现。符合面向抽象编程思想，增加工厂也不影响具体业务代码。</p>

<h2>建造者模式</h2>

<p>比较典型的实现是lombok的builder方法。
```java
public class BuilderDemo {
    private String name;
    private int age;
    private String phone;
    private String email;</p>

<pre><code>private BuilderDemo(BuilderDemoBuilder builder) {
    this.name = builder.name;
    this.age = builder.age;
    this.phone = builder.phone;
    this.email = builder.email;
}

public static class BuilderDemoBuilder {
    private String name;
    private int age;
    private String phone;
    private String email;

    public BuilderDemo build() {
        return new BuilderDemo(this);
    }

    public BuilderDemoBuilder setName(String name) {
        if (Objects.isNull(name)) {
            throw new IllegalArgumentException("name must not null");
        }
        this.name = name;
        return this;
    }

    public BuilderDemoBuilder setAge(int age) {
        this.age = age;
        return this;
    }

    public BuilderDemoBuilder setPhone(String phone) {
        if (Objects.isNull(name)) {
            throw new IllegalArgumentException("phone must not null");
        }
        this.phone = phone;
        return this;
    }

    public BuilderDemoBuilder setEmail(String email) {
        this.email = email;
        return this;
    }
}

public static void main(String[] args) {
    BuilderDemo build = new BuilderDemoBuilder().setAge(18).setEmail("email").setName("name").setPhone("13812340987").build();
    System.out.println(build.name);
}
</code></pre>

<p>}
```</p>

<h2>原型模式</h2>

<p>基于已有对象原型创建对象。</p>

<p>实现方式分为深拷贝和浅拷贝。深拷贝需要递归负责，创建一个完全独立的对象。浅拷贝只是拷贝引用地址，适合不会变的对象。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式-行为篇]]></title>
    <link href="http://toby1024.github.io/blog/2020/11/09/designpatterns1/"/>
    <updated>2020-11-09T11:04:08+08:00</updated>
    <id>http://toby1024.github.io/blog/2020/11/09/designpatterns1</id>
    <content type="html"><![CDATA[<p>{% img /images/DesignPatterns/202011091107.png %}</p>

<!--more-->


<h2>状态模式</h2>

<h3>有限状态机</h3>

<p>1:状态转换较多，但每个状态的转换业务不复杂的，推荐使用查表法。 <br>
通过二维数组等方式确定下一个转换的状态，并处理对应业务<br>
2:状态转换业务较复杂的，推荐使用状态模式，使用单独的类来定义状态和状态业务<br>
3:业务非常简单，状态也很少，直接使用if else就可以实现，不需要过度设计<br></p>

<h3>迭代器模式</h3>

<p>通过模拟游标的滑动来遍历集合中的数据<br>
迭代器需要实现 hasNext，currentItem，next三个方法，用于滑动游标和判断是否迭代结束<br>
遍历过程中不支持元素的添加和删除操作，因为会引起未决结果<br></p>

<h2>访问者模式</h2>

<p>一个或多个操作应用到一组对象上，设计的意图是解耦操作和对象本身，保持类的职责单一、满足开闭原则已应对代码的复杂性。<br>
推荐使用策略模式替代访问者模式。1:访问者模式使用重载实现，容易让访问者代码爆炸。2:不巧妙，不灵活，将一组操作封装在一起，增加功能时需要修改的代码太多。<br>
支持Double Dispatch的语言不需要访问者模式，直接动态执行就可以了<br></p>

<h2>备忘录模式</h2>

<p>1:备份以便于恢复数据<br>
2:不能破坏封装原则<br>
3:低频率全量备份结合高频率增量备份（redis RDF和AOF）<br></p>

<h2>命令模式</h2>

<p>1:将行为封装成对象进行传递<br>
2:和策略模式的区别在于，每个命令执行的是不同的业务；策略模式指同一个业务的不同实现。<br>
例如：控制电灯的开，关属于命令；是交流电还是直流电给电灯供电属于策略。<br></p>

<h2>解释器模式</h2>

<p>典型的场景是编译器的语法解释。<br>
解释器是针对特定的语句进行解释，调用特定的业务代码进行执行的过程。<br></p>

<h2>中介模式</h2>

<p>1:接口对象之间的交互关系，将多对多关系通过中介类转换为一对多。<br>
2:中介模式和观察者模式的区别在于，观察者关系是单向固定的，中介则可以是双向的。<br>
3:中介模式接收消息后进行业务编排调度。<br>
4:副作用：可能会产生一个大而全的上帝类，包含类所有的业务代码。（是否可以用命令模式进行拆分？）<br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式-面向对象编程]]></title>
    <link href="http://toby1024.github.io/blog/2020/10/23/design-pattern-rules/"/>
    <updated>2020-10-23T18:04:17+08:00</updated>
    <id>http://toby1024.github.io/blog/2020/10/23/design-pattern-rules</id>
    <content type="html"><![CDATA[<h1>面向对象</h1>

<p>{% img /images/blogs/mianxiangduixiang.png %}</p>

<!--more-->


<h2>多用组合少用继承</h2>

<p>继承过多过深影响代码可读性，提高维护成本</p>

<h1>设计原则与思想</h1>

<p>{% img /images/blogs/设计原则与思想.png %}</p>

<h2>单一职责原则  Single Responsibility Principle</h2>

<h3>如何理解单一职责</h3>

<p>一个类（方法）只完成一件事<br>
不要设计大而全的类（接口)<br>
高内聚低耦合<br></p>

<h3>如何判断是否职责单一</h3>

<p>类或方法无法准确命名<br>
依赖过多外部资源<br>
代码行数过多，类的属性或者函数过多<br>
类的方法都在集中操作某几个属性<br></p>

<h3>拆分粒度是否越细越好？</h3>

<p>考虑功能的相关性，避免低耦合过度失去高内聚，提高维护成本</p>

<h2>开闭原则  Open/Closed Principle</h2>

<p>对扩展开放，对修改关闭<br>
合理设计，不要过度设计<br>
职责单一，避免相互影响，保证稳定性<br></p>

<h2>DRY</h2>

<p>重复主要指：代码重复，语义重复，执行重复<br>
代码重复指的是同样的代码出现在多个地方，这种情况可以通过抽取方法，工具类的方式解决<br>
语义重复指的是相同的功能采用了不同的实现方法，出现在多个地方，这种情况可以通过抽取工具类的方法解决<br>
执行重复指的业务上下文执行了同样的逻辑，一般是参数校验，格式化等，需要从业务角度梳理，去除不必要的重复执行<br>
复用需要考虑扩展性，避免和业务耦合，保证代码的稳定性<br></p>

<h1>规范与重构</h1>

<p>{% img /images/blogs/规范与重构.png %}
重构是一个持续的过程，重构不光是代码级别的重构，也针对业务架构等<br>
重构的前提是单元测试要覆盖到位</p>

<h2>如何评价代码质量的高低</h2>

<p>代码质量高低是通过综合各种因素得到的结论，常见的描述有可读性，可维护性，简洁性，灵活性等，对应的一般都是面向对象的几个特性。所以好的代码应该是面向对象的。</p>

<h2>如何写出高质量的代码</h2>

<p>需要掌握面向对象的思想，做好设计再写代码，在编码过程中灵活使用设计模式，遵循编码规范，不断的重构完善代码。
{% img /images/DesignPatterns/20201124.jpg %}</p>
]]></content>
  </entry>
  
</feed>
