---
layout: post
title: "设计模式-面向对象编程"
date: 2020-10-23 18:04:17 +0800
comments: true
categories: 设计模式 
keywords: 设计原则与思想 面向对象
description: 面向对象：设计原则与思想
---
# 面向对象
{% img /images/blogs/mianxiangduixiang.png %}
<!--more-->
## 多用组合少用继承
继承过多过深影响代码可读性，提高维护成本

# 设计原则与思想
{% img /images/blogs/设计原则与思想.png %}

## 单一职责原则  Single Responsibility Principle

### 如何理解单一职责

一个类（方法）只完成一件事<br>
不要设计大而全的类（接口)<br>
高内聚低耦合<br>

### 如何判断是否职责单一

类或方法无法准确命名<br>
依赖过多外部资源<br>
代码行数过多，类的属性或者函数过多<br>
类的方法都在集中操作某几个属性<br>

### 拆分粒度是否越细越好？

考虑功能的相关性，避免低耦合过度失去高内聚，提高维护成本

## 开闭原则  Open/Closed Principle

对扩展开放，对修改关闭<br>
合理设计，不要过度设计<br>
职责单一，避免相互影响，保证稳定性<br>

## DRY
重复主要指：代码重复，语义重复，执行重复<br>
代码重复指的是同样的代码出现在多个地方，这种情况可以通过抽取方法，工具类的方式解决<br>
语义重复指的是相同的功能采用了不同的实现方法，出现在多个地方，这种情况可以通过抽取工具类的方法解决<br>
执行重复指的业务上下文执行了同样的逻辑，一般是参数校验，格式化等，需要从业务角度梳理，去除不必要的重复执行<br>
复用需要考虑扩展性，避免和业务耦合，保证代码的稳定性<br>

# 规范与重构
{% img /images/blogs/规范与重构.png %}
重构是一个持续的过程，重构不光是代码级别的重构，也针对业务架构等<br>
重构的前提是单元测试要覆盖到位