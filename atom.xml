<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jason's drunk words]]></title>
  <link href="http://toby1024.github.io/atom.xml" rel="self"/>
  <link href="http://toby1024.github.io/"/>
  <updated>2020-11-09T09:04:45+08:00</updated>
  <id>http://toby1024.github.io/</id>
  <author>
    <name><![CDATA[jason3305@126.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[领域驱动实践-从需求到代码]]></title>
    <link href="http://toby1024.github.io/blog/2020/11/05/ling-yu-qu-dong-shi-jian-cong-xu-qiu-dao-dai-ma/"/>
    <updated>2020-11-05T17:37:41+08:00</updated>
    <id>http://toby1024.github.io/blog/2020/11/05/ling-yu-qu-dong-shi-jian-cong-xu-qiu-dao-dai-ma</id>
    <content type="html"><![CDATA[<h2>业务需求</h2>

<p>网约车出行项目mvp</p>

<!--more-->


<ul>
<li>作为乘客我希望创建⼀个出⾏订单，以便于从A地前往B地</li>
<li>作为司机我希望履⾏⼀个订单，以便于获取收⼊</li>
<li>作为运营我希望能取消订单，以便于乘客联系不上司机时重新下单</li>
</ul>


<h2>传统mvc模式</h2>

<p>传统mvc往往基于数据模型进行开发，通过需求分析，确定数据模型，然后在数据模型上做CRUD开发<br>
<img src="http://toby1024.github.io/images/ddd/20201105175028.jpg"><br>
server类中聚集类所有的业务代码<br>
<img src="http://toby1024.github.io/images/ddd/20201105175158.jpg"><br>
所有的操作都是在操作数据，当业务变得越来越复杂时，service中的代码越来越臃肿，然后根据业务进行模块拆分，但是由于业务纵横交错，后续修改业务代码时，可能会需要修改多个模块。</p>

<h2>微服务开发</h2>

<p>微服务的出现一部分原因就是希望将业务划分清楚，解决模块耦合的问题，借助领域驱动设计，我们可以通过一些方法论来进行业务建模和微服务划分。</p>

<h3>统一语言</h3>

<p>针对不同的角色，同一个事务可能有不同定义。<br></p>

<ul>
<li>对于乘客来说，出行订单应该是一个行程。乘客关心的是起点，终点，司机的实时位置，需要支出的费用。<br></li>
<li>对于设计来说，出行订单是一笔生意。司机关心的是乘客的位置，目的地，该笔行程的收入、奖励。<br></li>
<li>对于运营人员来说，出行订单是一个合约，合约的双方是乘客和司机，运营人员关注合约的履约情况，合约的抽成信息等。<br></li>
</ul>


<p>针对不同的参与角色，我们定义不同的模型概念。
<img src="http://toby1024.github.io/images/ddd/20201106085636.jpg"><br>
通过对业务进行限界上下文划分，很容易就可以进行代码的隔离，不同的上下文分开进行编码，上下文之间的业务调用通过api接口方式进行交互，这样后续的业务演进，系统部署升级以及扩容都相对独立。<br>
但是一个userstor就划分一个微服务肯定是不现实的，我们需要根据业务的相关性来进行，从两个方向来进行组织限界上下文。<br></p>

<h4>语义相关性</h4>

<p>不同的用例存在语义相关性就可以考虑放在一个限界上线文内。例如创建行程，取消行程都跟行程有关，就适合放在一个限界上下文来处理。</p>

<h4>功能相关性</h4>

<p>有些用例虽然都是操作相同的对象，但是在功能上有相互的独立性，应该考虑分割成独立的上下文。例如支付行程，虽然也是在操作行程对象，但其实更侧重于支付动作，后续的业务扩展也多围绕在支付上，如增加支付渠道，增加租金统计等和行程关联不大。</p>

<h3>DEMO</h3>

<p>代码参考：<a href="https://github.com/toby1024/ddd-demo">ddd-demo</a>
<img src="http://toby1024.github.io/images/ddd/20201106091014.jpg"><br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql_covering_index]]></title>
    <link href="http://toby1024.github.io/blog/2020/11/05/mysql-covering-index/"/>
    <updated>2020-11-05T11:37:02+08:00</updated>
    <id>http://toby1024.github.io/blog/2020/11/05/mysql-covering-index</id>
    <content type="html"><![CDATA[<h2>index</h2>

<p>索引用于快速查找具有特定列值的行，如果没有索引，mysql必须从第一行开始，扫描全表找到对应的行。表越大，花费越多。如果表中有相关的索引，mysql可以快速确定要在数据文件中查找的位置。大多数mysql索引（primary key，unique，index和fulltext）存储在B-trees。空间数据类型的索引使用R-trees；MEMORY表还支持hash indexes；InnoDB对fulltext使用倒排表。<br>
MySQL使用索引进行以下操作：</p>

<!--more-->


<ul>
<li>通过where条件快速查询。</li>
<li>最优匹配。如果可以在多个索引之间进行选择，则MySQL通常会使用查找最小行数的索引。</li>
<li>如果表具有多列索引，那么优化器可以使用索引的任何最左前缀来查找行。举例来说，如果你有一个三列的索引 (col1, col2, col3)，你可以索引的搜索有(col1)， (col1, col2)以及(col1, col2, col3)。</li>
<li>执行联接时从其他表中检索行。如果声明相同的类型和大小，MySQL可以更有效地在列上使用索引。在这种情况下， VARCHAR与 CHAR被认为是相同的，如果它们被声明为相同的大小。例如， VARCHAR(10)和 CHAR(10)是相同的大小，但是 VARCHAR(10)和 CHAR(15)不是。<br>
  对于非二进制字符串列之间的比较，两个列应使用相同的字符集，不同的字符集将导致索引失效。例如，将utf8列与latin1列进行比较会排除使用索引。<br>
  如果不能不通过转换直接比较值，则比较不同的列（例如，将字符串列与时间或数字列进行比较）可能会阻止使用索引。对于给定的值，如数值列的值为1，它可能比较等于在字符串列，例如任何数量的值 &lsquo;1'，&rsquo; 1'， &lsquo;00001'，或'01.e1'，导致索引失效。</li>
<li>在索引列使用MIN()或 MAX()。mysql预处理器将进行优化，预处理器会检查您是否正在索引出现的所有关键部分上使用。在这种情况下，MySQL为每个表达式执行一次键查找，并将其替换为常量，所有表达式都用常量替换完成后，查询将立即返回。</li>
<li>排序或分组查询（order by， group by）使用最左匹配索引（order by key1, key2）；如果倒序排序（order by key1, key2 desc）,将按相反顺序使用索引key。</li>
<li>某些情况下，mysql会直接从索引中获取数据，而不用查询表；例如：只查询索引列数据。注意：当开启列长事务时，可能导致该优化失效，回表查询。</li>
<li>当全表扫描快于走索引查询时，mysql也不会走索引。</li>
</ul>


<h2>covering index</h2>

<p>查询的所有列都包含在索引中时，mysql不会扫描表（即不会回表查询），这种情况mysql定义为covering index；InnoDb引擎下，开启事务时，将不会使用这种优化查询。</p>

<h2>参考资料</h2>

<p><a href="https://dev.mysql.com/doc/refman/8.0/en/optimizing-innodb-transaction-management.html">8.5.2 Optimizing InnoDB Transaction Management</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[领域驱动-事件风暴]]></title>
    <link href="http://toby1024.github.io/blog/2020/11/04/event-storming/"/>
    <updated>2020-11-04T09:24:36+08:00</updated>
    <id>http://toby1024.github.io/blog/2020/11/04/event-storming</id>
    <content type="html"><![CDATA[<blockquote><ul>
<li><font size=3>佛，在信徒眼里是佛，是希望；在工艺品厂里，对于工人来说，就是一个活，是工作对象，是收入的来源；对于物流公司来说，是货，是责任担当，是运输的标的。</font></li>
<li><font size=3>不同的事件主题关注的业务事件是不同，领域模型也是不同的。</font></li>
<li><font size=3>在不同的领域模型中，统一语言。</font></li>
</ul>
</blockquote>

<!--more-->


<h2>事件风暴</h2>

<p>事件风暴是一种快速探索复杂业务领域和对领域建模的实践。
事件风暴从领域关注的业务事件出发，经过团队的充分讨论，统一语言，最终找到领域模型。</p>

<h2>如何确定领域关注的业务事件</h2>

<p>在通用语言中存在“如果A发生，我们就需要做到B。”，这样的表述，那么A就可以定义成为一个领域事件。<br/>
领域事件的命名一般采用 “产生事件的对象名称+完成动作的过去形式” 的形式，这有点类似用户故事的描述。其实用户故事就可以看作是一个领域事件，只是用户故事转换成业务事件时，需要根据业务领域统一语言。</p>

<h2>如何开展事件风暴</h2>

<p>大部分的资料都是站在全局的高度去做事件风暴，将整个系统一起进行事件拆分，划分领域模型。<br/>
这样做当然没错，但是实际开发过程中，我们往往1:缺少领域专家；2:缺少足够是时间来做领域分析，事件风暴。这往往导致事件风暴成为理论，而缺少实践。<br/>
从我个人观点来看，架构是不断演进的，业务一直在变化，代码也一直在修改，那么，我们就可以从业务点出发，从一个需求出发，做事件风暴。</p>

<h3>准备工作</h3>

<p>必不可少的便利贴，开放的空间，大白板。<br/>
全员参与，包括业务，产品，开发，测试，UI。</p>

<h3>核心概念</h3>

<p>事件风暴将系统拆分为不同的元素，用不同颜色的便利贴表示。<br>
<img src="http://toby1024.github.io/images/ddd/event0.jpg"><br></p>

<h3>统一语言</h3>

<p>统一语言非常重要，是沟通的起点，如果一个业务内，包括业务方，产品，开发之间对于概念的表述不统一，会造成沟通不顺畅，甚至出现南辕北辙的现象。由于前期我们是从单个需求出发，可能统一语言定义出来的概念并不准确，或者在命名上有争议，不必介意，统一语言除了准确描述业务对象以外，更主要的功能是上下文的沟通和传递，只要上下文是统一的，业务就可以顺利开展，代码也可以准确编写。如果后续其他需求增加变更，发现之前定义的名称不准确，概念上修改过来就可以了。<br/></p>

<h3>事件风暴过程</h3>

<p><img src="http://toby1024.github.io/images/ddd/event_flow.jpg"><br></p>

<h4>识别领域事件</h4>

<p>事件风暴以识别领域事件开始。书写领域事件的规则是使用被动语态，按照事件发展顺序贴在白板上。<br>
遇到有争议的事件，不必过多纠结，先标记成热点事件，后续可以重点讨论。<br>
事件一般由名次和动词组合而成，例如：订单已创建；地址已填写。<br></p>

<blockquote><p><font size=3>注意：用户的前端操作不是事件，例如：用户提交订单，用户提交表单；这些只是为事件提供数据。</font></p></blockquote>

<h4>识别参与者</h4>

<p>事件一共有四种参与者：
<img src="http://toby1024.github.io/images/ddd/event.jpg"><br></p>

<pre><code>- 角色：触发事件的人
- 策略：触发事件的规则
- 外部系统
- 事件：即当前事件的前置事件
</code></pre>

<blockquote><p><font size=3>注意：策略是规则，但规则不是策略。策略是规则+定时器的组合。策略会触发事件，但规则不会。 </font></p></blockquote>

<h4>识别限界上下文</h4>

<p>从两个方向识别限界上下文：<br></p>

<ul>
<li>纵向：识别事件流中的事件，倘若相邻两个事件的关系较弱，或者体现了两个非常明显的阶段，就可以对其进行分割。</li>
<li>横向：梳理是有的事件，根据组成事件的名词和动词去发现事件之间的相关性（相同、相似的名词），然后去提炼一个整体的概念。</li>
</ul>


<p>限界上下文包含场景，角色，活动，知识和能力，不包含UI部分。<br>
限界上下文可以由不连续的事件组成。<br>
限界上下文在命名的时候使用名词来定义。</p>

<h5>识别限界上下文遵循的原则</h5>

<ul>
<li><p>单一抽象层次原则
每个限界上下文从概念上应该尽量处于统一抽象层次，不能嵌套。
<img src="http://toby1024.github.io/images/ddd/event3.jpg"><br></p></li>
<li><p>正交原则
限界上下文之间不能互相影响，互相包含。
<img src="http://toby1024.github.io/images/ddd/event4.jpg"><br></p></li>
</ul>


<h4>识别上下文映射</h4>

<p>通过事件风暴：
* 首先识别跨界限界上下文之间相邻事件的关系。
* 事件之间是否存在直接触发的关系（参与者为前置事件），需要确定这两个事件所述的限界上下文。
* 判断这两个事件所属的限界上下文，谁是主要的。主要的上下文就是下游。通常，前置事件为下游，或是事件的发布者。</p>

<blockquote><p><font size=3>下游调用上游。<br>
事件依赖关系为单向依赖.<br>
避免下游使用上游的的领域模型（尊奉者模式），由上游来定义参数上和返回值，下游根据情况来决定是否需要定义防腐层。<br>
一般来说，事件如果由自己的角色参与者（角色，策略，外部系统），就与前置事件脱离来关系。</font></p></blockquote>

<h4>领域分析建模</h4>

<p>一个事件只能有一个写模型，如果出现多个写模型，要么就是这几个写模型存在包含关系，要么就是写模型遗漏了对应的事件。<br>
对于读模型，要注意它属于那个限界上下文，如果不是当前上下文，则：</p>

<blockquote><ul>
<li>定义自己的读模型，通过防腐层进行转换，尽量不要迎合下游</li>
<li>使用ID值对象（用于建立关联）（基本类型偏执）</li>
<li>读模型和写模型就是领域模型对象
<img src="http://toby1024.github.io/images/ddd/event5.jpg"><br></li>
</ul>
</blockquote>

<h5>识别聚合</h5>

<ul>
<li>针对领域分享模型，梳理模型对象之间的关系（继承，合成，聚合，依赖，无关系）</li>
<li>确定领域模型对象是实体还是值对象</li>
<li>将具有继承或合成关系的领域模型对象放在一个聚合边界内</li>
<li>根据聚合的本质（概念完整性，概念独立性，不变量Invariant，事务一致性）梳理聚合</li>
</ul>


<h3>代码实现</h3>

<h4>角色构造型</h4>

<p><img src="http://toby1024.github.io/images/ddd/event6.jpg"><br>
DomainService来协调单个领域模型/值对象无法完成的业务功能，主要是数据持久化，外部接口调用获取数据等<br>
AppService则负责业务编排<br>
Factory负责封装复杂的创建逻辑，用于创建领域对象</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式-面向对象编程]]></title>
    <link href="http://toby1024.github.io/blog/2020/10/23/design-pattern-rules/"/>
    <updated>2020-10-23T18:04:17+08:00</updated>
    <id>http://toby1024.github.io/blog/2020/10/23/design-pattern-rules</id>
    <content type="html"><![CDATA[<h1>面向对象</h1>

<p><img src="http://toby1024.github.io/images/blogs/mianxiangduixiang.png"></p>

<!--more-->


<h2>多用组合少用继承</h2>

<p>继承过多过深影响代码可读性，提高维护成本</p>

<h1>设计原则与思想</h1>

<p><img src="http://toby1024.github.io/images/blogs/设计原则与思想.png"></p>

<h2>单一职责原则  Single Responsibility Principle</h2>

<h3>如何理解单一职责</h3>

<p>一个类（方法）只完成一件事<br>
不要设计大而全的类（接口)<br>
高内聚低耦合<br></p>

<h3>如何判断是否职责单一</h3>

<p>类或方法无法准确命名<br>
依赖过多外部资源<br>
代码行数过多，类的属性或者函数过多<br>
类的方法都在集中操作某几个属性<br></p>

<h3>拆分粒度是否越细越好？</h3>

<p>考虑功能的相关性，避免低耦合过度失去高内聚，提高维护成本</p>

<h2>开闭原则  Open/Closed Principle</h2>

<p>对扩展开放，对修改关闭<br>
合理设计，不要过度设计<br>
职责单一，避免相互影响，保证稳定性<br></p>

<h2>DRY</h2>

<p>重复主要指：代码重复，语义重复，执行重复<br>
代码重复指的是同样的代码出现在多个地方，这种情况可以通过抽取方法，工具类的方式解决<br>
语义重复指的是相同的功能采用了不同的实现方法，出现在多个地方，这种情况可以通过抽取工具类的方法解决<br>
执行重复指的业务上下文执行了同样的逻辑，一般是参数校验，格式化等，需要从业务角度梳理，去除不必要的重复执行<br>
复用需要考虑扩展性，避免和业务耦合，保证代码的稳定性<br></p>

<h1>规范与重构</h1>

<p><img src="http://toby1024.github.io/images/blogs/规范与重构.png">
重构是一个持续的过程，重构不光是代码级别的重构，也针对业务架构等<br>
重构的前提是单元测试要覆盖到位</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于Octopress和github搭建自己的Blog]]></title>
    <link href="http://toby1024.github.io/blog/2020/10/23/first/"/>
    <updated>2020-10-23T09:32:10+08:00</updated>
    <id>http://toby1024.github.io/blog/2020/10/23/first</id>
    <content type="html"><![CDATA[<h2>基于源代码搭建</h2>

<p><a href="http://octopress.org/docs/">官方文档</a>
Octopress是基于jekyll开发的，使用ruby，所以如果是windows的话，建议放弃折腾</p>
]]></content>
  </entry>
  
</feed>
